//--------------------------------------------------------------------------
// Load libraries and mesh
//--------------------------------------------------------------------------


//verbosity = 10;

//loads
load "msh3" // for buildlayers function
load "gmsh" // for loading gmsh meshes

//includes
include "EDP/exports.idp"
//include "../exports.idp"

string root="Matrices/Modelv5/";
//string root="../../Matrices/Modelv5/";

//load the mesh from the Gmsh file
mesh3 Th = gmshload3("Mesh/Modelv5/Modelv5.msh");
//mesh3 Th = gmshload3("../../Mesh/Modelv5/Modelv5.msh");

//region
int plate = 5;
int ROOM = 6;
int PML = 7;
//label
int embedding = 1;
int inplate = 2;
int extplate = 3;
int ROOMPML = 4;



//boundary label
int[int] boundaryLabel(3);
boundaryLabel(0) = inplate;
boundaryLabel(1) = extplate;
boundaryLabel(2) = ROOMPML;



//--------------------------------------------------------------------------
// Define variables, functions, and macros
//--------------------------------------------------------------------------

real E = 2e9;
real nu = 0.3;
real rhoS = 1200;
real eta = 5e-2;

real mu = E/(2*(1+nu));
real lambda = E*nu/((1+nu)*(1-2*nu));

real sqrt2=sqrt(2.0);

macro Grad(p) [dx(p),dy(p),dz(p)] // EOM -- End Of Macro

macro epsilon(u1,u2,u3)  [dx(u1),
			  dy(u2),
			  dz(u3),
			  (dz(u2)+dy(u3))/sqrt2,
			  (dz(u1)+dx(u3))/sqrt2,
			  (dy(u1)+dx(u2))/sqrt2] // EOM -- End Of Macro

macro div(u1,u2,u3) ( dx(u1)+dy(u2)+dz(u3) ) // EOM -- End Of Macro



//--------------------------------------------------------------------------
// Define finite element space, solid and fluid
//--------------------------------------------------------------------------

fespace VhS(Th,[P2,P2,P2]);
VhS [u1,u2,u3], [v1,v2,v3];

fespace VhF(Th,P2);
VhF p,v;

//--------------------------------------------------------------------------
// PML functions
//--------------------------------------------------------------------------


real Lbg = 0.8;
real lpml = 0.5;
real l1 = 0.4;

real Lbg1x = l1;
real Lbg2x = l1+lpml;
real Lbg1y = l1;
real Lbg2y = l1+lpml;
real Lbg1z = Lbg;
real Lbg2z = Lbg+lpml;

real fstar = 100; //Hz

real km = 2*pi*fstar/340.0;
real sigma1 = log(2.0)/(l1+lpml);
real sigma2 = log(2.0)/(Lbg+lpml);

cout << "\n\nkm = " << km << "\nsig1 = " << sigma1 << "\nsig2 = " << sigma2 << endl << endl;

func PML1x=sigma1/(Lbg2x-abs(x)) ;
func decay1x=(region==PML) ? 1-1i*PML1x/km : 1 ;//
func PML1y=sigma1/(Lbg2y-abs(y)) ;
func decay1y=(region==PML) ? 1-1i*PML1y/km : 1 ;//
func PML1z=sigma2/(Lbg2z-abs(z)) ;
func decay1z=(region==PML) ? 1-1i*PML1z/km : 1 ;//



//--------------------------------------------------------------------------
// Define varf
//--------------------------------------------------------------------------


//Solid

varf kr([u1,u2,u3], [v1,v2,v3]) = int3d(Th, plate)( lambda*div(u1,u2,u3)*div(v1,v2,v3) +
	  	            		  	    2.0*mu*( epsilon(u1,u2,u3)'*epsilon(v1,v2,v3) ) ) +
					          on(embedding, u1=0, u2=0, u3=0);

varf ki([u1,u2,u3], [v1,v2,v3]) = int3d(Th, plate)( eta*(lambda*div(u1,u2,u3)*div(v1,v2,v3) +
	  	            		  	         2.0*mu*( epsilon(u1,u2,u3)'*epsilon(v1,v2,v3)) ) );

varf m([u1,u2,u3], [v1,v2,v3]) = int3d(Th, plate)( rhoS*[u1,u2,u3]'*[v1,v2,v3] );

//Coupling
varf c1(p, v) = int2d(Th, inplate)( p*v );   // the normal vector to the surface is n = Uz

varf c2(p, v) = int2d(Th, extplate)( p*v );   // the normal vector to the surface is n = Uz


//Fluid
varf hpmlr(p, v) = int3d(Th, PML, ROOM)( dx(p)*dx(v)*real( decay1y*decay1z/decay1x ) +
					 dy(p)*dy(v)*real( decay1x*decay1z/decay1y ) +
					 dz(p)*dz(v)*real( decay1x*decay1y/decay1z ) );
varf hpmli(p, v) = int3d(Th, PML, ROOM)( dx(p)*dx(v)*imag( decay1y*decay1z/decay1x ) +
			       		 dy(p)*dy(v)*imag( decay1x*decay1z/decay1y ) +
			   	   	 dz(p)*dz(v)*imag( decay1x*decay1y/decay1z ) );

varf qpmlr(p, v) = int3d(Th, PML, ROOM)( p*v*real( decay1x*decay1y*decay1z ) );
varf qpmli(p, v) = int3d(Th, PML, ROOM)( p*v*imag( decay1x*decay1y*decay1z ) );



//--------------------------------------------------------------------------
// Define matrices
//--------------------------------------------------------------------------

//Solid

matrix Kr = kr(VhS, VhS);
matrix Ki = ki(VhS, VhS);
matrix M = m(VhS, VhS);
matrix C1 = c1(VhF, VhF);
matrix C2 = c2(VhF, VhF);
{
ofstream fout(root+"M.txt");
fout<< M <<endl;
}
{
ofstream fout(root+"Kr.txt");
fout<< Kr <<endl;
}
{
ofstream fout(root+"Ki.txt");
fout<< Ki <<endl;
}
{
ofstream fout(root+"C1.txt");
fout << C1 << endl;
}
{
ofstream fout(root+"C2.txt");
fout << C2 << endl;
}



//Fluid
matrix Hpmlr = hpmlr(VhF, VhF);
matrix Hpmli = hpmli(VhF, VhF);
matrix Qpmlr = qpmlr(VhF, VhF);
matrix Qpmli = qpmli(VhF, VhF);
{
ofstream fout(root+"Hpmlr.txt");
fout << Hpmlr << endl;
}
{
ofstream fout(root+"Hpmli.txt");
fout << Hpmli << endl;
}
{
ofstream fout(root+"Qpmlr.txt");
fout << Qpmlr << endl;
}
{
ofstream fout(root+"Qpmli.txt");
fout << Qpmli << endl;
}
//--------------------------------------------------------------------------
// Export Data
//--------------------------------------------------------------------------

saveRegionLabels(VhF, root+"regions.txt");
saveBoundariesLabels(VhF, boundaryLabel, root+"labels.txt");
saveNodes(VhF,root+"Nodes.txt");
saveConnectivity(Th, VhF, root+"connectivity_table.txt");





