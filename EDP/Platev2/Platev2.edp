//--------------------------------------------------------------------------
// Load libraries and mesh
//--------------------------------------------------------------------------

load "msh3" // for buildlayers function
load "gmsh" // for loading gmsh meshes

include "../exports.idp"

string root="../../Matrices/Platev2/"; 
mesh3 Th = gmshload3("../../Mesh/Platev2.msh");

int acoustic = 1;
int elastic = 2;
int embedding = 3;
int coupling = 4;
int extpressure = 5;
int PML = 6;

int[int] boundaryLabel(3);

boundaryLabel[0] = embedding;
boundaryLabel[1] = coupling;
boundaryLabel[2] = extpressure;


//--------------------------------------------------------------------------
// Define variables, functions, and macros
//--------------------------------------------------------------------------

real E = 2e9;
real nu = 0.3;
real mu = E/(2*(1+nu));
real lambda = E*nu/((1+nu)*(1-2*nu));

real rhoS = 1200;

real sqrt2=sqrt(2);

macro Grad(p) [dx(p),dy(p),dz(p)] // EOM -- End Of Macro

macro epsilon(u1,u2,u3)  [dx(u1),
            						  dy(u2),
            						  dz(u3),
            						  (dz(u2)+dy(u3))/sqrt2,
            						  (dz(u1)+dx(u3))/sqrt2,
            						  (dy(u1)+dx(u2))/sqrt2] // EOM -- End Of Macro

macro div(u1,u2,u3) ( dx(u1)+dy(u2)+dz(u3) ) // EOM -- End Of Macro



//--------------------------------------------------------------------------
// Define finite element space, solid and fluid
//--------------------------------------------------------------------------

fespace VhS(Th,[P2,P2,P2]);
VhS [u1,u2,u3], [v1,v2,v3];

fespace VhF(Th,P2);
VhF p,v;

//--------------------------------------------------------------------------
// PML
//--------------------------------------------------------------------------

real l = 0.2;
real L = 0.3;
real Lpml = 0.5;

real L1x = 2*L;//real L1x = 5.5;
real L2x = 2*L+Lpml;
real L1y = L;//real L1y = 3.0;
real L2y = L+Lpml;
real L1z = L;//real L1z = 3.0;
real L2z = L+Lpml;

real fstar = 100;
real km = (2*pi*fstar)/340;

cout << "km = " << km << endl;

real sigmax = 1;//6.27;
real sigmay = 1.5;//8.63; 
real sigmaz = 1.5;//8.63;

func PML3x=sigmax/(L2x-abs(x)) ;
func decay1x=(abs(x)>2*L) ? 1+1i*PML3x/km : 1 ;
func PML3y=sigmay/(L2y-abs(y)) ;
func decay1y=(abs(y)>L) ? 1+1i*PML3y/km : 1 ;
func PML3z=sigmaz/(L2z-abs(z)) ;
func decay1z=(abs(z)>L) ? 1+1i*PML3z/km : 1 ;



//--------------------------------------------------------------------------
// Define varf
//--------------------------------------------------------------------------

//Plate
varf k([u1,u2,u3], [v1,v2,v3]) = int3d(Th, elastic)( lambda*div(u1,u2,u3)*div(v1,v2,v3) +
	  	            		  	     			                 2*mu*( epsilon(u1,u2,u3)'*epsilon(v1,v2,v3) ) ) +
				 				                 on(embedding, u1=0, u2=0, u3=0);

varf m([u1,u2,u3], [v1,v2,v3]) = int3d(Th, elastic)( rhoS*[u1,u2,u3]'*[v1,v2,v3] );



//Cavity



varf hr(p, v) = int3d(Th, acoustic, PML)( dx(p)*dx(v)*real( decay1y*decay1z/decay1x ) +
                                          dy(p)*dy(v)*real( decay1x*decay1z/decay1y ) +
                                          dz(p)*dz(v)*real( decay1x*decay1y/decay1z ) );

varf hi(p, v) = int3d(Th, acoustic, PML)( dx(p)*dx(v)*imag( decay1y*decay1z/decay1x ) +
                                          dy(p)*dy(v)*imag( decay1x*decay1z/decay1y ) +
                                          dz(p)*dz(v)*imag( decay1x*decay1y/decay1z ) );

varf qr(p, v) = int3d(Th, acoustic, PML)( p*v*real( decay1x*decay1y*decay1z ) );

varf qi(p, v) = int3d(Th, acoustic, PML)( p*v*imag( decay1x*decay1y*decay1z ) );

//Coupling
varf c1(p,v) = int2d(Th, extpressure)( p*v );
varf c2(p,v) = int2d(Th, coupling)( p*v );


varf rhs(unused,v) = int2d(Th, extpressure)(1.0*v);


//--------------------------------------------------------------------------
// Define matrices
//--------------------------------------------------------------------------

//Solid
matrix K = k(VhS, VhS);
matrix M = m(VhS, VhS);
//Fluid
matrix Hr = hr(VhF, VhF);
matrix Qr = qr(VhF, VhF);
matrix Hi = hi(VhF, VhF);
matrix Qi = qi(VhF, VhF);
//Coupling
matrix C1 = c1(VhF, VhF);
matrix C2 = c2(VhF, VhF);

//RHS
real[int] rhstmp = rhs(0, VhF);
matrix RHS = rhstmp;




{
ofstream fout(root+"K.txt");
fout<< K <<endl;
}
{
ofstream fout(root+"M.txt");
fout<< M <<endl;
}
{
ofstream fout(root+"Hr.txt");
fout<< Hr <<endl;
}
{
ofstream fout(root+"Qr.txt");
fout<< Qr <<endl;
}
{ofstream fout(root+"Hi.txt");
fout<< Hi <<endl;
}
{
ofstream fout(root+"Qi.txt");
fout<< Qi <<endl;
}
{
ofstream fout(root+"C1.txt");
fout<< C1 <<endl;
}
{
ofstream fout(root+"C2.txt");
fout<< C2 <<endl;
}
{
ofstream fout(root+"RHS.txt");
fout<< RHS <<endl;
}


saveRegionLabels(VhF, root+"regions.txt");
saveBoundariesLabels(VhF, boundaryLabel, root+"labels.txt");
saveNodes(VhF,root+"Nodes.txt");
saveConnectivity(Th, VhF, root+"connectivity_table.txt");